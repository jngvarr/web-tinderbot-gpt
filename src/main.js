const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
    }

    async start(msg) {
        this.mode = "main"
        const text = this.loadMessage("main")
        await this.sendImage("main")
        await this.sendText(text);
        await this.showMainMenu({
            "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
            "html": "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å HTML",
        })
    }

    async html(msg) {
        await this.sendHTML('<h3 style="color: brown"> –ü—Ä–∏–≤–µ—Ç! </h3>');
        const html = this.loadHtml("main");
        await this.sendHTML(html, {theme: "dark"});
        await this.sendHTML(html, {theme: "light"});
    }

    async gpt(msg) {
        this.mode = "gpt"
        await this.sendImage("gpt");
        const text = this.loadMessage("gpt")
        // await this.sendText("–ü–æ–æ–±—â–∞–µ–º—Å—è —Å –ò–ò");
        await this.sendText(text);
    }

    async gptDialog(msg) {
        const myMessage = await this.sendText("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ....")
        const answer = await chat.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ", msg.text);
        await this.editText(myMessage, answer);
    }

    async date(msg) {
        this.mode = "date"
        await this.sendImage("date");
        const text = this.loadMessage("date")
        await this.sendTextButtons(text, {
                "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
                "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
                "date_zendaya": "–ó–µ–Ω–¥–µ—è",
                "date_gosling": "–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥",
                "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
            }
        )
    }

    async dateButton(callbackQuery) {
        const query = callbackQuery.data;
        // await this.sendText(query)
        await this.sendImage(query);
        await this.sendText("–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –£ —Ç–µ–±—è –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!!   ");

        chat.setPrompt(this.loadPrompt(query));
    }

    async dateDialog(msg) {
        const answer = await chat.addMessage(msg.text);
        const message = await this.sendText("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç....")
        await this.editText(message, answer);
    }

    async message(msg) {
        this.mode = "message";
        await this.sendImage("message");
        const text = this.loadMessage("message")
        await this.sendTextButtons(text, {
            "message_next": "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        })
    }

    async messageButton(callbackQuery) {
        // const query = callbackQuery.data;
        // await this.sendText(query);
        const prompt = this.loadPrompt(callbackQuery.data);
        // const userChatHistory = this.list.join("\n\n");
        const myMessage = await this.sendText("ChatGPT –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞....")
        const answer = await chat.sendQuestion(prompt, this.list.join("\n\n"));
        await this.editText(myMessage, answer)
        // this.list.forEach(msg => {this.sendText(msg, myMessage)});
        // console.log(this.list);
        this.list = []
        // console.log(this.list);
    }

    async messageDialog(msg) {
        this.list.push(msg.text);
    }

    async hello(msg) {
        if (this.mode === "gpt")
            await this.gptDialog(msg);
        else if (this.mode === "date")
            await this.dateDialog(msg);
        else if (this.mode === "message")
            await this.messageDialog(msg);
        else {
            const text = msg.text;
            await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`);
            await this.sendText("<b>–ü—Ä–∏–≤–µ—Ç</b>");
            await this.sendText("<i>–û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å</i>");

            await this.sendImage("question")

            await this.sendTextButtons("–ö–∞–∫–æ–≥–æ –≤—ã –ø–æ–ª–∞?", {
                    "male": "–ú—É–∂—á–∏–Ω–∞",
                    "female": "–ñ–µ–Ω—â–∏–Ω–∞",
                }
            )
        }
    }

    async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if (query === "female") {
            await this.sendText("How your doin'?")
            await this.sendImage("joe")
        } else if (query === "male") {
            await this.sendText("Hello Dude!")
            await this.sendImage("joe_m")
        }
    }
}

const bot = new MyTelegramBot("7862159452:AAHKNzowB-C8f-9Ue0Idq-iRzYoG-L7Bgzk");
const chat = new ChatGptService("gpt:ho7T8VOJeY6EVWR4okSxJFkblB3Tp7tf2SeYm4s7gNS3LPJN");

bot.onCommand(/\/start/, bot.start) // start
bot.onCommand(/\/html/, bot.html) // html
bot.onCommand(/\/gpt/, bot.gpt) // gpt
bot.onCommand(/\/date/, bot.date) // date
bot.onCommand(/\/message/, bot.message) // message
bot.onTextMessage(bot.hello)
bot.onButtonCallback(/^date_.*/, bot.dateButton) // date
bot.onButtonCallback(/^message_.*/, bot.messageButton) // message
bot.onButtonCallback(/^.*/, bot.helloButton) // any string
